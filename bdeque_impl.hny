from synch import Lock, Condition;

def Bdeque(n) returns bd:
    """
    returns the initial value of an empty bdeque with at most n elements.
    """
    bd = {
        .mutex: Lock(),
        .put: Condition(),
        .get: Condition(),
        .peek: Condition(),
        .items: [None] * n,
        .capacity: n,
        .size: 0,
        .head: 0,
        .tail: 0
    }

def put_left(d, v):
    """
    d points to a bdeque and v is some value. 
    Put v at the left-end of the bdeque. 
    Does not return a value. 
    Should block if the bdeque is full.
    """
    acquire(?d->mutex)
    while d->size == d->capacity:
        wait(?d->put, ?d->mutex)
    d->head = ((d->head - 1) + d->capacity) % d->capacity
    d->items[d->head] = v
    d->size += 1
    # notify(?d->if_empty)
    release(?d->mutex)

def put_right(d, v):
    """
    d points to a bdeque and v is some value. 
    Put v at the right-end of the bdeque. 
    Does not return a value. 
    Should block if the bdeque is full.
    """
    acquire(?d->mutex)
    while d->size == d->capacity:
        wait(?d->put, ?d->mutex)
    d->items[d->tail] = v
    d->tail = (d->tail + 1) % d->capacity
    d->size += 1
    # notify(?d->if_empty)
    release(?d->mutex)

def get_left(d):
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should remove and return the value at the left-end of the bdeque.
    """
    acquire(?d->mutex)
    while d->size == 0:
        wait(?d->get, ?d->mutex)
    result = d->items[d->head]
    d->head = (d->head + 1) % d->capacity
    d->size -= 1
    # notify(?d->if_full)
    release(?d->mutex)

def get_right(d):
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should remove and return the value at the right-end of the bdeque.
    """
    acquire(?d->mutex)
    while d->size == 0:
        wait(?d->put, ?d->mutex)
    d->tail = ((d->tail - 1) + d->capacity) % d->capacity
    result = d->items[d->tail]
    d->size -= 1
    # notify(?d->if_full)
    release(?d->mutex)

def peek_left(d):
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should return the value at the left-end of the bdeque.
    """
    acquire(?d->mutex)
    while d->size == 0:
        wait(?d->peek, ?d->mutex)
    result = d->items[d->head]
    release(?d->mutex)
    return result

def peek_right(d):
    """
    d points to a bdeque.
    If the bdeque is empty, the operation should wait.
    Otherwise it should return the value at the right-end of the bdeque.
    """ 
    acquire(?d->mutex)
    while d->size == 0:
        wait(?d->peek, ?d->mutex)
    result = d->items[((d->tail - 1) + d->capacity) % d->capacity]
    release(?d->mutex)
    return result





