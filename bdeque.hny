from synch import Lock, Condition;

def Bdeque(n) returns empty:
    """
    returns the initial value of an empty bdeque with at most n elements.
    """
    empty = { .buffer: [], .size: n }

def put_left(d, v):
    """
    d points to a bdeque and v is some value. 
    Put v at the left-end of the bdeque. 
    Does not return a value. 
    Should block if the bdeque is full.
    """
    # lst = list(!d)
    # if !d[-1] == None:
    atomically when len(d->buffer) < d->size:
        d->buffer = [v,] + d->buffer
        d->size += 1

def put_right(d, v):
    """
    d points to a bdeque and v is some value. 
    Put v at the right-end of the bdeque. 
    Does not return a value. 
    Should block if the bdeque is full.
    """
    atomically when len(d->buffer) < d->size:
        d->buffer = d->buffer + [v,]
        d->size += 1

def get_left(d) returns result:
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should remove and return the value at the left-end of the bdeque.
    """
    atomically when len(d->buffer) != 0:
        result = d->buffer[0]
        if len(d->buffer) == 1:
            d->buffer = []
        else:
            del d->buffer[0]
        d->size -= 1
    

def get_right(d) returns result:
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should remove and return the value at the right-end of the bdeque.
    """
    atomically when len(d->buffer) != 0:
        result = d->buffer[len(d->buffer) - 1]
        if len(d->buffer) == 1:
            d->buffer = []
        else:
            del d->buffer[len(d->buffer) - 1]
        d->size -= 1

def peek_left(d) returns result :
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should return the value at the left-end of the bdeque.
    """
    atomically when len(d->buffer) != 0:
        result = d->buffer[0]

def peek_right(d) returns result:
    """
    d points to a bdeque.
    If the bdeque is empty, the operation should wait.
    Otherwise it should return the value at the right-end of the bdeque.
    """ 
    atomically when len(d->buffer) != 0:
        result = d->buffer[len(d->buffer) - 1]





