from synch import Lock, Condition;

def Bdeque(n) returns empty:
    """
    returns the initial value of an empty bdeque with at most n elements.
    """
    empty = [None] * n

def put_left(d, v):
    """
    d points to a bdeque and v is some value. 
    Put v at the left-end of the bdeque. 
    Does not return a value. 
    Should block if the bdeque is full.
    """
    # lst = list(!d)
    if !d[-1] == None:
        atomically !d = [v,] + subseq(!d, 0, len(!d) - 1)

def put_right(d, v):
    """
    d points to a bdeque and v is some value. 
    Put v at the right-end of the bdeque. 
    Does not return a value. 
    Should block if the bdeque is full.
    """
    if !d[-1] == None:
        for i in range(len(!d)):
            if !d[i] == None:
                atomically !d[i] = v
                break

def get_left(d):
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should remove and return the value at the left-end of the bdeque.
    """
    await !d[0] != None
    result = !d[0]
    atomically !d = subseq(!d, 1, len(!d))
    return result



def get_right(d):
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should remove and return the value at the right-end of the bdeque.
    """
    await !d[0] != None
    result = !d[-1]
    atomically !d = subseq(!d, 0, len(!d) - 1)
    return result

def peek_left(d):
    """
    d points to a bdeque. 
    If the bdeque is empty, the operation should wait. 
    Otherwise it should return the value at the left-end of the bdeque.
    """
    await !d[0] != None
    result = !d[0]
    return result

def peek_right(d):
    """
    d points to a bdeque.
    If the bdeque is empty, the operation should wait.
    Otherwise it should return the value at the right-end of the bdeque.
    """ 
    await !d[0] != None
    result = !d[-1]
    return result





